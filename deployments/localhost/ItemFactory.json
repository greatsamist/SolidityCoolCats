{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "milkContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardRarity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "rewardData",
          "type": "bytes"
        }
      ],
      "name": "LogDailyClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_commonRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_epicRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_legendaryRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_maxRarityRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_milkContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_rareRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uncommonRoll",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "petTokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "common",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "uncommon",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "rare",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "epic",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "legendary",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxRoll",
          "type": "uint16"
        }
      ],
      "name": "setRarityRolls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRarity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "rewardData",
          "type": "bytes"
        }
      ],
      "name": "setReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2255a92dc3a0cac8167c21e124d39d81e416d2d32041d5f2dac9bb7c42c0ec83",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4426748",
    "logsBloom": "0x
    "blockHash": "0x4b6414a9cd3b3e796b45dd87fee0f60c9cb59eebd77d9325adaa5a97d5ec3a7a",
    "transactionHash": "0x2255a92dc3a0cac8167c21e124d39d81e416d2d32041d5f2dac9bb7c42c0ec83",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x2255a92dc3a0cac8167c21e124d39d81e416d2d32041d5f2dac9bb7c42c0ec83",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4b6414a9cd3b3e796b45dd87fee0f60c9cb59eebd77d9325adaa5a97d5ec3a7a"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "4426748",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "ad483c09daf2a1c9326be91f68d30cce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"milkContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rewardData\",\"type\":\"bytes\"}],\"name\":\"LogDailyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_commonRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_epicRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_legendaryRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxRarityRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_milkContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rareRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uncommonRoll\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"petTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"common\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"uncommon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rare\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"epic\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"legendary\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxRoll\",\"type\":\"uint16\"}],\"name\":\"setRarityRolls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRarity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rewardData\",\"type\":\"bytes\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)\":{\"params\":{\"common\":\"- rarity level of common quests\",\"epic\":\"- rarity level of epic quests\",\"legendary\":\"- rarity level of legendary quests\",\"maxRoll\":\"- max rarity level\",\"rare\":\"- rarity level of rare quests\",\"uncommon\":\"- rarity level of uncommon quests\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"_commonRoll\":{\"details\":\"Rarity rolls\"},\"_lastClaimed\":{\"details\":\"Track last time an address claim\"},\"_lastUpdate\":{\"details\":\"Track last time a claim was made for a specific pet\"},\"_rewardMapping\":{\"details\":\"rewardType => (rewardRarity => data)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)\":{\"notice\":\"returns the rarity level set for each rarity, and the maximum roll\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/itemFactory.sol\":\"ItemFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x74216d303b87202736b6d571fc3e9b530aa98ff017a41516170f1c555e518669\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Milk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract Milk is ERC20, AccessControl {\\r\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\r\\n\\r\\n    bytes32 public constant CONTRACT_ROLE = keccak256(\\\"CONTRACT_ROLE\\\");\\r\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\r\\n\\r\\n    constructor(string memory name, string memory symbol)\\r\\n        // address systemCheckerContractAddress\\r\\n        ERC20(name, symbol)\\r\\n    {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @notice called when token is deposited on root chain\\r\\n    /// @dev Should be callable only by ChildChainManager\\r\\n    /// Should handle deposit by minting the required amount for user\\r\\n    /// Make sure minting is done only by this function\\r\\n    /// @param user user address for whom deposit is being done\\r\\n    /// @param depositData abi encoded amount\\r\\n    function deposit(address user, bytes calldata depositData)\\r\\n        external\\r\\n        onlyRole(DEPOSITOR_ROLE)\\r\\n    {\\r\\n        uint256 amount = abi.decode(depositData, (uint256));\\r\\n        _mint(user, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice called when user wants to withdraw tokens back to root chain\\r\\n    /// @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\r\\n    /// @dev external with no role to allow users requesting withdraw of token when not part of game\\r\\n    /// @dev _burn() handles quantity check\\r\\n    /// @param amount amount of tokens to withdraw\\r\\n    function withdraw(uint256 amount) external {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /* TREASURY ROLES **/\\r\\n    // Special role specifically for the treasury. This allows us to create a special relationship between\\r\\n    // the treasury and Milk contract. Never know when you might need it :)\\r\\n\\r\\n    /// @notice called when user wants to withdraw tokens back to root chain\\r\\n    /// @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\r\\n    /// @dev User requests withdrawal and game system handles it so we have to stipulate the users address\\r\\n    /// @dev Strictly speaking a logged in user has given us permission to do this, but its polite to ask :)\\r\\n    /// @dev _burn() handles quantity check\\r\\n    /// @param owner address of user withdrawing tokens\\r\\n    /// @param amount amount of tokens to withdraw\\r\\n    function gameWithdraw(address owner, uint256 amount)\\r\\n        external\\r\\n        onlyRole(CONTRACT_ROLE)\\r\\n    {\\r\\n        _burn(owner, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Allow the system to manage Milk within itself\\r\\n    /// @dev _transfer() handles amount check\\r\\n    /// @param sender Address to transfer from\\r\\n    /// @param recipient Address to transfer to\\r\\n    /// @param amount Amount of Gold to send - wei\\r\\n    function gameTransferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external onlyRole(CONTRACT_ROLE) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows system to burn tokens\\r\\n    /// @dev _burn handles the amount checking\\r\\n    /// @dev to prevent double milking :p we have to transfer token before burning it\\r\\n    /// @dev Due to the way PoS bridge works we have to use a _burnHolderAddress that we control\\r\\n    /// @dev on the Ethereum side. Contract will work but wallet is more versatile.\\r\\n    /// @param owner Holder address to burn tokens of\\r\\n    /// @param amount Amount of tokens to burn\\r\\n    function gameBurn(address owner, uint256 amount)\\r\\n        external\\r\\n        onlyRole(CONTRACT_ROLE)\\r\\n    {\\r\\n        _transfer(owner, address(this), amount);\\r\\n        _burn(address(this), amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a user some gold\\r\\n    /// @dev Only activate users should ever be minted Gold\\r\\n    /// @dev Reserved for game generation of Gold via quests/battles/etc...\\r\\n    /// @param to Address to mint to\\r\\n    /// @param amount Amount of Gold to send - wei\\r\\n    function gameMint(address to, uint256 amount)\\r\\n        external\\r\\n        onlyRole(CONTRACT_ROLE)\\r\\n    {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    /* MASTER ROLES **/\\r\\n    // For ease of use and security we separate CONTRACT_ROLE from MASTER_ROLES\\r\\n\\r\\n    /// @notice Mint that MILK\\r\\n    /// @dev Designed for minting of initial token allocations\\r\\n    /// @param account user for whom tokens are being minted\\r\\n    /// @param amount amount of token to mint in wei\\r\\n    function mint(address account, uint256 amount)\\r\\n        public\\r\\n        onlyRole(MASTER_ROLE)\\r\\n    {\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc6920cb7507a39247cd6f31adadbbea5913d6834c9e5bf9e51188b70a740dda0\",\"license\":\"MIT\"},\"contracts/common/ERC1155SupplyCC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\r\\n *\\r\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\r\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\r\\n * corresponding is an NFT, there is no guarantees that no other token with the\\r\\n * same id are not going to be minted.\\r\\n */\\r\\nabstract contract ERC1155SupplyCC is ERC1155 {\\r\\n    mapping(uint256 => uint256) private _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev Total amount of tokens in with a given id.\\r\\n     */\\r\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\r\\n        return _totalSupply[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates whether any token exist with a given id, or not.\\r\\n     */\\r\\n    function exists(uint256 id) public view virtual returns (bool) {\\r\\n        return ERC1155SupplyCC.totalSupply(id) > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                _totalSupply[ids[i]] += amounts[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                uint256 id = ids[i];\\r\\n                uint256 amount = amounts[i];\\r\\n                uint256 supply = _totalSupply[id];\\r\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\r\\n                unchecked {\\r\\n                    _totalSupply[id] = supply - amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaa2f79f09a8c7bcda178fd32f5d5cd90ab05d33c4483d35ed3be8932f8703a95\",\"license\":\"MIT\"},\"contracts/itemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./common/ERC1155SupplyCC.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\nimport \\\"./Milk.sol\\\";\\r\\n\\r\\ncontract ItemFactory is ERC1155SupplyCC, AccessControl {\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n\\r\\n    /// @dev Track last time a claim was made for a specific pet\\r\\n    mapping(uint256 => uint256) public _lastUpdate;\\r\\n\\r\\n    /// @dev Track last time an address claim\\r\\n    mapping(address => uint256) _lastClaimed;\\r\\n\\r\\n    address public _milkContractAddress;\\r\\n\\r\\n    event LogDailyClaim(\\r\\n        address _claimer,\\r\\n        uint256 _rewardType,\\r\\n        uint256 rewardRarity,\\r\\n        bytes rewardData\\r\\n    );\\r\\n\\r\\n    /// @dev Rarity rolls\\r\\n    uint16 public _commonRoll = 60;\\r\\n    uint16 public _uncommonRoll = 80;\\r\\n    uint16 public _rareRoll = 90;\\r\\n    uint16 public _epicRoll = 98;\\r\\n    uint16 public _legendaryRoll = 100;\\r\\n    uint16 public _maxRarityRoll;\\r\\n    enum ERarity {\\r\\n        COMMON,\\r\\n        UNCOMMON,\\r\\n        RARE,\\r\\n        EPIC,\\r\\n        LEGENDARY\\r\\n    }\\r\\n\\r\\n    enum EType {\\r\\n        BOX,\\r\\n        MILK\\r\\n    }\\r\\n\\r\\n    /// @dev rewardType => (rewardRarity => data)\\r\\n    mapping(uint256 => mapping(uint256 => bytes)) _rewardMapping;\\r\\n\\r\\n    constructor(string memory uri, address milkContractAddress) ERC1155(uri) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        _milkContractAddress = milkContractAddress;\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        address claimer,\\r\\n        uint256 entropy,\\r\\n        uint256 petTokenId\\r\\n    ) external {\\r\\n        // an address can only claim once per day\\r\\n        require(\\r\\n            block.timestamp > _lastClaimed[claimer] + 86400,\\r\\n            \\\" can only claim once per day\\\"\\r\\n        );\\r\\n        // generate a single random number and bit shift as needed\\r\\n        uint256 randomNumb = randomNum(entropy);\\r\\n\\r\\n        // roll and pick the rarity level of the reward\\r\\n        uint256 randRarity = randomNumb % _legendaryRoll;\\r\\n        uint256 rewardRarity;\\r\\n        bytes memory rewardData;\\r\\n        uint256 rewardType = uint256(EType.BOX);\\r\\n\\r\\n        // pick rarity based on rarity chances\\r\\n        if (randRarity < _commonRoll) {\\r\\n            rewardRarity = uint256(ERarity.COMMON);\\r\\n        } else if (randRarity < _uncommonRoll) {\\r\\n            rewardRarity = uint256(ERarity.UNCOMMON);\\r\\n        } else if (randRarity < _rareRoll) {\\r\\n            rewardRarity = uint256(ERarity.RARE);\\r\\n        } else if (randRarity < _epicRoll) {\\r\\n            rewardRarity = uint256(ERarity.EPIC);\\r\\n        } else {\\r\\n            rewardRarity = uint256(ERarity.LEGENDARY);\\r\\n        }\\r\\n\\r\\n        // handle Legendary on its own\\r\\n        // always a box\\r\\n        if (rewardRarity == uint256(ERarity.LEGENDARY)) {\\r\\n            // give the user a box\\r\\n            _mint(claimer, 1, 1, \\\"\\\");\\r\\n        }\\r\\n        // handle MILK or ITEMS\\r\\n        else {\\r\\n            // This will pick a random number between 0 and 1 inc.\\r\\n            // MILK or ITEMS.\\r\\n            rewardType = randomNum(entropy) % uint256(EType.BOX);\\r\\n\\r\\n            // convert the reward mapping data to min and max\\r\\n            (uint256 min, uint256 max, uint256[] memory ids) = abi.decode(\\r\\n                _rewardMapping[rewardType][rewardRarity],\\r\\n                (uint256, uint256, uint256[])\\r\\n            );\\r\\n\\r\\n            // do some bit shifting magic to create random min max\\r\\n            uint256 rewardAmount = min +\\r\\n                ((randomNum(entropy)) % (max - min + 1));\\r\\n\\r\\n            // Give a MILK reward\\r\\n            if (rewardType == uint256(EType.MILK)) {\\r\\n                Milk milk = Milk(_milkContractAddress);\\r\\n                milk.gameMint(claimer, rewardAmount);\\r\\n                rewardData = abi.encode(rewardAmount);\\r\\n            }\\r\\n            // Give an item reward\\r\\n            else {\\r\\n                uint256 index = (randomNum(entropy)) % ids.length;\\r\\n                _mint(claimer, ids[index], rewardAmount, \\\"\\\");\\r\\n                rewardData = abi.encode(ids[index], rewardAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LogDailyClaim(claimer, rewardType, rewardRarity, rewardData);\\r\\n\\r\\n        // Claims are specific to the that pet, not the claimer or a combination of claimer and pet\\r\\n        _lastUpdate[petTokenId] = block.timestamp;\\r\\n        // Storing the claim time\\r\\n        _lastClaimed[claimer] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function randomNum(uint256 entropy) internal view returns (uint256) {\\r\\n        return\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encode(block.timestamp, block.difficulty, entropy)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /** SETTERS */\\r\\n\\r\\n    /// @notice returns the rarity level set for each rarity, and the maximum roll\\r\\n    /// @param common - rarity level of common quests\\r\\n    /// @param uncommon - rarity level of uncommon quests\\r\\n    /// @param rare - rarity level of rare quests\\r\\n    /// @param epic - rarity level of epic quests\\r\\n    /// @param legendary - rarity level of legendary quests\\r\\n    /// @param maxRoll - max rarity level\\r\\n    function setRarityRolls(\\r\\n        uint16 common,\\r\\n        uint16 uncommon,\\r\\n        uint16 rare,\\r\\n        uint16 epic,\\r\\n        uint16 legendary,\\r\\n        uint16 maxRoll\\r\\n    ) external onlyRole(ADMIN_ROLE) {\\r\\n        require(common < uncommon, \\\"Common must be less rare than uncommon\\\");\\r\\n        require(uncommon < rare, \\\"Uncommon must be less rare than rare\\\");\\r\\n        require(rare < epic, \\\"Rare must be less rare than epic\\\");\\r\\n        require(epic < legendary, \\\"Epic must be less rare than legendary\\\");\\r\\n        require(\\r\\n            legendary <= maxRoll,\\r\\n            \\\"Legendary rarity level must be less than or equal to the max rarity roll\\\"\\r\\n        );\\r\\n\\r\\n        _commonRoll = common;\\r\\n        _uncommonRoll = uncommon;\\r\\n        _rareRoll = rare;\\r\\n        _epicRoll = epic;\\r\\n        _legendaryRoll = legendary;\\r\\n        _maxRarityRoll = maxRoll;\\r\\n    }\\r\\n\\r\\n    function setReward(\\r\\n        uint256 rewardType,\\r\\n        uint256 rewardRarity,\\r\\n        bytes calldata rewardData\\r\\n    ) external onlyRole(ADMIN_ROLE) {\\r\\n        _rewardMapping[rewardType][rewardRarity] = rewardData;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC1155, AccessControl)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC1155).interfaceId ||\\r\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0824931bfe4dc85f532e8943559511457f17a0339149207d3bfe95c86a98a452\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052603c600760146101000a81548161ffff021916908361ffff1602179055506050600760166101000a81548161ffff021916908361ffff160217905550605a600760186101000a81548161ffff021916908361ffff16021790555060626007601a6101000a81548161ffff021916908361ffff16021790555060646007601c6101000a81548161ffff021916908361ffff160217905550348015620000a757600080fd5b5060405162005488380380620054888339818101604052810190620000cd91906200041d565b81620000df816200014d60201b60201c565b50620001046000801b620000f86200016960201b60201c565b6200017160201b60201c565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000635565b806002908051906020019062000165929190620002e4565b5050565b600033905090565b6200018382826200018760201b60201c565b5050565b6200019982826200027960201b60201c565b620002755760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200021a6200016960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054620002f29062000540565b90600052602060002090601f01602090048101928262000316576000855562000362565b82601f106200033157805160ff191683800117855562000362565b8280016001018555821562000362579182015b828111156200036157825182559160200191906001019062000344565b5b50905062000371919062000375565b5090565b5b808211156200039057600081600090555060010162000376565b5090565b6000620003ab620003a584620004a0565b62000477565b905082815260208101848484011115620003c457600080fd5b620003d18482856200050a565b509392505050565b600081519050620003ea816200061b565b92915050565b600082601f8301126200040257600080fd5b81516200041484826020860162000394565b91505092915050565b600080604083850312156200043157600080fd5b600083015167ffffffffffffffff8111156200044c57600080fd5b6200045a85828601620003f0565b92505060206200046d85828601620003d9565b9150509250929050565b60006200048362000496565b905062000491828262000576565b919050565b6000604051905090565b600067ffffffffffffffff821115620004be57620004bd620005db565b5b620004c9826200060a565b9050602081019050919050565b6000620004e382620004ea565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200052a5780820151818401526020810190506200050d565b838111156200053a576000848401525b50505050565b600060028204905060018216806200055957607f821691505b6020821081141562000570576200056f620005ac565b5b50919050565b62000581826200060a565b810181811067ffffffffffffffff82111715620005a357620005a2620005db565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200062681620004d6565b81146200063257600080fd5b50565b614e4380620006456000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c80635d5d588c116100f9578063a22cb46511610097578063d547741f11610071578063d547741f1461052c578063db43235b14610548578063e985e9c514610566578063f242432a14610596576101c3565b8063a22cb465146104c2578063bd85b039146104de578063d44c46701461050e576101c3565b806375b238fc116100d357806375b238fc1461043857806391d14854146104565780639beccd5f14610486578063a217fddf146104a4576101c3565b80635d5d588c146103e05780636a6b6ed8146103fc578063710d2b151461041a576101c3565b80632bc43fd91161016657806336568abe1161014057806336568abe1461034857806340a32dc5146103645780634e1273f4146103805780634f558e79146103b0576101c3565b80632bc43fd9146102f45780632eb2c2d6146103105780632f2ff15d1461032c576101c3565b806309c3bf72116101a257806309c3bf72146102585780630e89341c1461027657806313ca9157146102a6578063248a9ca3146102c4576101c3565b8062fdd58e146101c857806301ffc9a7146101f857806305c1e52a14610228575b600080fd5b6101e260048036038101906101dd91906134e1565b6105b2565b6040516101ef9190614161565b60405180910390f35b610212600480360381019061020d919061363d565b61067b565b60405161021f9190613e6e565b60405180910390f35b610242600480360381019061023d9190613718565b61075d565b60405161024f9190614161565b60405180910390f35b610260610775565b60405161026d9190614146565b60405180910390f35b610290600480360381019061028b9190613718565b610789565b60405161029d9190613ea4565b60405180910390f35b6102ae61081d565b6040516102bb9190613cc3565b60405180910390f35b6102de60048036038101906102d991906135d8565b610843565b6040516102eb9190613e89565b60405180910390f35b61030e6004803603810190610309919061351d565b610863565b005b61032a60048036038101906103259190613357565b610f4a565b005b61034660048036038101906103419190613601565b610feb565b005b610362600480360381019061035d9190613601565b61100c565b005b61037e6004803603810190610379919061368f565b61108f565b005b61039a6004803603810190610395919061356c565b6112e3565b6040516103a79190613e15565b60405180910390f35b6103ca60048036038101906103c59190613718565b611494565b6040516103d79190613e6e565b60405180910390f35b6103fa60048036038101906103f591906137a8565b6114a8565b005b61040461150d565b6040516104119190614146565b60405180910390f35b610422611521565b60405161042f9190614146565b60405180910390f35b610440611535565b60405161044d9190613e89565b60405180910390f35b610470600480360381019061046b9190613601565b611559565b60405161047d9190613e6e565b60405180910390f35b61048e6115c4565b60405161049b9190614146565b60405180910390f35b6104ac6115d8565b6040516104b99190613e89565b60405180910390f35b6104dc60048036038101906104d791906134a5565b6115df565b005b6104f860048036038101906104f39190613718565b6115f5565b6040516105059190614161565b60405180910390f35b610516611612565b6040516105239190614146565b60405180910390f35b61054660048036038101906105419190613601565b611626565b005b610550611647565b60405161055d9190614146565b60405180910390f35b610580600480360381019061057b919061331b565b61165b565b60405161058d9190613e6e565b60405180910390f35b6105b060048036038101906105ab9190613416565b6116ef565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a90613f66565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061074657507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610756575061075582611790565b5b9050919050565b60056020528060005260406000206000915090505481565b6007601c9054906101000a900461ffff1681565b606060028054610798906144e2565b80601f01602080910402602001604051908101604052809291908181526020018280546107c4906144e2565b80156108115780601f106107e657610100808354040283529160200191610811565b820191906000526020600020905b8154815290600101906020018083116107f457829003601f168201915b50505050509050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060046000838152602001908152602001600020600101549050919050565b62015180600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108b19190614306565b42116108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e990614126565b60405180910390fd5b60006108fd8361180a565b905060006007601c9054906101000a900461ffff1661ffff1682610921919061458e565b9050600060606000806001811115610962577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050600760149054906101000a900461ffff1661ffff168410156109c157600060048111156109ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250610b17565b600760169054906101000a900461ffff1661ffff16841015610a1e5760016004811115610a17577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250610b16565b600760189054906101000a900461ffff1661ffff16841015610a7b5760026004811115610a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250610b15565b6007601a9054906101000a900461ffff1661ffff16841015610ad85760036004811115610ad1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250610b14565b600480811115610b11577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92505b5b5b5b600480811115610b50577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b831415610b7857610b738860018060405180602001604052806000815250611841565b610ea7565b60006001811115610bb2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610bbb8861180a565b610bc5919061458e565b905060008060006008600085815260200190815260200160002060008781526020019081526020016000208054610bfb906144e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c27906144e2565b8015610c745780601f10610c4957610100808354040283529160200191610c74565b820191906000526020600020905b815481529060010190602001808311610c5757829003601f168201915b5050505050806020019051810190610c8c9190613741565b925092509250600060018484610ca291906143b6565b610cac9190614306565b610cb58c61180a565b610cbf919061458e565b84610cca9190614306565b9050600180811115610d05577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b851415610dc8576000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634eb902998e846040518363ffffffff1660e01b8152600401610d6e929190613da0565b600060405180830381600087803b158015610d8857600080fd5b505af1158015610d9c573d6000803e3d6000fd5b5050505081604051602001610db19190614161565b604051602081830303815290604052965050610ea2565b60008251610dd58d61180a565b610ddf919061458e565b9050610e3c8d848381518110610e1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518460405180602001604052806000815250611841565b828181518110610e75577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182604051602001610e8f92919061417c565b6040516020818303038152906040529650505b505050505b7f0abddb16689c98df752491657c9e586eff3198ece0269bcb57d4f690528e71a488828585604051610edc9493929190613dc9565b60405180910390a142600560008881526020019081526020016000208190555042600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050505050565b610f526119f2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610f985750610f9785610f926119f2565b61165b565b5b610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce90613fe6565b60405180910390fd5b610fe485858585856119fa565b5050505050565b610ff482610843565b610ffd81611d68565b6110078383611d7c565b505050565b6110146119f2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890614106565b60405180910390fd5b61108b8282611e5d565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756110b981611d68565b8561ffff168761ffff1610611103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fa90613f46565b60405180910390fd5b8461ffff168661ffff161061114d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114490614046565b60405180910390fd5b8361ffff168561ffff1610611197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118e90614066565b60405180910390fd5b8261ffff168461ffff16106111e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d890613f86565b60405180910390fd5b8161ffff168361ffff16111561122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390613ee6565b60405180910390fd5b86600760146101000a81548161ffff021916908361ffff16021790555085600760166101000a81548161ffff021916908361ffff16021790555084600760186101000a81548161ffff021916908361ffff160217905550836007601a6101000a81548161ffff021916908361ffff160217905550826007601c6101000a81548161ffff021916908361ffff160217905550816007601e6101000a81548161ffff021916908361ffff16021790555050505050505050565b60608151835114611329576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611320906140a6565b60405180910390fd5b6000835167ffffffffffffffff81111561136c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561139a5781602001602082028036833780820191505090505b50905060005b8451811015611489576114338582815181106113e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110611426577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516105b2565b82828151811061146c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508061148290614545565b90506113a0565b508091505092915050565b6000806114a0836115f5565b119050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756114d281611d68565b82826008600088815260200190815260200160002060008781526020019081526020016000209190611505929190612f5c565b505050505050565b600760189054906101000a900461ffff1681565b600760169054906101000a900461ffff1681565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6007601a9054906101000a900461ffff1681565b6000801b81565b6115f16115ea6119f2565b8383611f3f565b5050565b600060036000838152602001908152602001600020549050919050565b6007601e9054906101000a900461ffff1681565b61162f82610843565b61163881611d68565b6116428383611e5d565b505050565b600760149054906101000a900461ffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6116f76119f2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061173d575061173c856117376119f2565b61165b565b5b61177c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177390613fa6565b60405180910390fd5b61178985858585856120ac565b5050505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611803575061180282612348565b5b9050919050565b6000424483604051602001611821939291906141a5565b6040516020818303038152906040528051906020012060001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a8906140e6565b60405180910390fd5b60006118bb6119f2565b905060006118c88561242a565b905060006118d58561242a565b90506118e6836000898585896124f0565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119459190614306565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516119c392919061417c565b60405180910390a46119da8360008985858961275a565b6119e983600089898989612762565b50505050505050565b600033905090565b8151835114611a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a35906140c6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa590613fc6565b60405180910390fd5b6000611ab86119f2565b9050611ac88187878787876124f0565b60005b8451811015611cc5576000858281518110611b0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110611b54577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bec90614006565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611caa9190614306565b9250508190555050505080611cbe90614545565b9050611acb565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d3c929190613e37565b60405180910390a4611d5281878787878761275a565b611d60818787878787612949565b505050505050565b611d7981611d746119f2565b612b30565b50565b611d868282611559565b611e595760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611dfe6119f2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611e678282611559565b15611f3b5760006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611ee06119f2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa590614086565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161209f9190613e6e565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561211c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211390613fc6565b60405180910390fd5b60006121266119f2565b905060006121338561242a565b905060006121408561242a565b90506121508389898585896124f0565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156121e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121de90614006565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461229c9190614306565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161231992919061417c565b60405180910390a461232f848a8a86868a61275a565b61233d848a8a8a8a8a612762565b505050505050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061241357507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612423575061242282612bcd565b5b9050919050565b60606000600167ffffffffffffffff81111561246f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561249d5781602001602082028036833780820191505090505b50905082816000815181106124db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b6124fe868686868686612c37565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156125fc5760005b83518110156125fa57828181518110612578577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600360008684815181106125bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546125e29190614306565b92505081905550806125f390614545565b9050612536565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156127525760005b8351811015612750576000848281518110612678577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008483815181106126bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006003600084815260200190815260200160002054905081811015612722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271990614026565b60405180910390fd5b81810360036000858152602001908152602001600020819055505050508061274990614545565b9050612634565b505b505050505050565b505050505050565b6127818473ffffffffffffffffffffffffffffffffffffffff16612c3f565b15612941578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016127c7959493929190613d46565b602060405180830381600087803b1580156127e157600080fd5b505af192505050801561281257506040513d601f19601f8201168201806040525081019061280f9190613666565b60015b6128b85761281e61467b565b806308c379a0141561287b5750612833614ced565b8061283e575061287d565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128729190613ea4565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128af90613ec6565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461293f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293690613f26565b60405180910390fd5b505b505050505050565b6129688473ffffffffffffffffffffffffffffffffffffffff16612c3f565b15612b28578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016129ae959493929190613cde565b602060405180830381600087803b1580156129c857600080fd5b505af19250505080156129f957506040513d601f19601f820116820180604052508101906129f69190613666565b60015b612a9f57612a0561467b565b806308c379a01415612a625750612a1a614ced565b80612a255750612a64565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a599190613ea4565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9690613ec6565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1d90613f26565b60405180910390fd5b505b505050505050565b612b3a8282611559565b612bc957612b5f8173ffffffffffffffffffffffffffffffffffffffff166014612c62565b612b6d8360001c6020612c62565b604051602001612b7e929190613c89565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc09190613ea4565b60405180910390fd5b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006002836002612c75919061435c565b612c7f9190614306565b67ffffffffffffffff811115612cbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612cf05781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612d4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612dd8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612e18919061435c565b612e229190614306565b90505b6001811115612f0e577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612e8a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612ec7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612f07906144b8565b9050612e25565b5060008414612f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4990613f06565b60405180910390fd5b8091505092915050565b828054612f68906144e2565b90600052602060002090601f016020900481019282612f8a5760008555612fd1565b82601f10612fa357803560ff1916838001178555612fd1565b82800160010185558215612fd1579182015b82811115612fd0578235825591602001919060010190612fb5565b5b509050612fde9190612fe2565b5090565b5b80821115612ffb576000816000905550600101612fe3565b5090565b600061301261300d84614201565b6141dc565b9050808382526020820190508285602086028201111561303157600080fd5b60005b8581101561306157816130478882613181565b845260208401935060208301925050600181019050613034565b5050509392505050565b600061307e6130798461422d565b6141dc565b9050808382526020820190508285602086028201111561309d57600080fd5b60005b858110156130cd57816130b388826132f1565b8452602084019350602083019250506001810190506130a0565b5050509392505050565b60006130ea6130e58461422d565b6141dc565b9050808382526020820190508285602086028201111561310957600080fd5b60005b85811015613139578161311f8882613306565b84526020840193506020830192505060018101905061310c565b5050509392505050565b600061315661315184614259565b6141dc565b90508281526020810184848401111561316e57600080fd5b613179848285614476565b509392505050565b60008135905061319081614d83565b92915050565b600082601f8301126131a757600080fd5b81356131b7848260208601612fff565b91505092915050565b600082601f8301126131d157600080fd5b81356131e184826020860161306b565b91505092915050565b600082601f8301126131fb57600080fd5b815161320b8482602086016130d7565b91505092915050565b60008135905061322381614d9a565b92915050565b60008135905061323881614db1565b92915050565b60008135905061324d81614dc8565b92915050565b60008151905061326281614dc8565b92915050565b60008083601f84011261327a57600080fd5b8235905067ffffffffffffffff81111561329357600080fd5b6020830191508360018202830111156132ab57600080fd5b9250929050565b600082601f8301126132c357600080fd5b81356132d3848260208601613143565b91505092915050565b6000813590506132eb81614ddf565b92915050565b60008135905061330081614df6565b92915050565b60008151905061331581614df6565b92915050565b6000806040838503121561332e57600080fd5b600061333c85828601613181565b925050602061334d85828601613181565b9150509250929050565b600080600080600060a0868803121561336f57600080fd5b600061337d88828901613181565b955050602061338e88828901613181565b945050604086013567ffffffffffffffff8111156133ab57600080fd5b6133b7888289016131c0565b935050606086013567ffffffffffffffff8111156133d457600080fd5b6133e0888289016131c0565b925050608086013567ffffffffffffffff8111156133fd57600080fd5b613409888289016132b2565b9150509295509295909350565b600080600080600060a0868803121561342e57600080fd5b600061343c88828901613181565b955050602061344d88828901613181565b945050604061345e888289016132f1565b935050606061346f888289016132f1565b925050608086013567ffffffffffffffff81111561348c57600080fd5b613498888289016132b2565b9150509295509295909350565b600080604083850312156134b857600080fd5b60006134c685828601613181565b92505060206134d785828601613214565b9150509250929050565b600080604083850312156134f457600080fd5b600061350285828601613181565b9250506020613513858286016132f1565b9150509250929050565b60008060006060848603121561353257600080fd5b600061354086828701613181565b9350506020613551868287016132f1565b9250506040613562868287016132f1565b9150509250925092565b6000806040838503121561357f57600080fd5b600083013567ffffffffffffffff81111561359957600080fd5b6135a585828601613196565b925050602083013567ffffffffffffffff8111156135c257600080fd5b6135ce858286016131c0565b9150509250929050565b6000602082840312156135ea57600080fd5b60006135f884828501613229565b91505092915050565b6000806040838503121561361457600080fd5b600061362285828601613229565b925050602061363385828601613181565b9150509250929050565b60006020828403121561364f57600080fd5b600061365d8482850161323e565b91505092915050565b60006020828403121561367857600080fd5b600061368684828501613253565b91505092915050565b60008060008060008060c087890312156136a857600080fd5b60006136b689828a016132dc565b96505060206136c789828a016132dc565b95505060406136d889828a016132dc565b94505060606136e989828a016132dc565b93505060806136fa89828a016132dc565b92505060a061370b89828a016132dc565b9150509295509295509295565b60006020828403121561372a57600080fd5b6000613738848285016132f1565b91505092915050565b60008060006060848603121561375657600080fd5b600061376486828701613306565b935050602061377586828701613306565b925050604084015167ffffffffffffffff81111561379257600080fd5b61379e868287016131ea565b9150509250925092565b600080600080606085870312156137be57600080fd5b60006137cc878288016132f1565b94505060206137dd878288016132f1565b935050604085013567ffffffffffffffff8111156137fa57600080fd5b61380687828801613268565b925092505092959194509250565b60006138208383613c6b565b60208301905092915050565b613835816143ea565b82525050565b60006138468261429a565b61385081856142c8565b935061385b8361428a565b8060005b8381101561388c5781516138738882613814565b975061387e836142bb565b92505060018101905061385f565b5085935050505092915050565b6138a2816143fc565b82525050565b6138b181614408565b82525050565b60006138c2826142a5565b6138cc81856142d9565b93506138dc818560208601614485565b6138e58161469d565b840191505092915050565b60006138fb826142b0565b61390581856142ea565b9350613915818560208601614485565b61391e8161469d565b840191505092915050565b6000613934826142b0565b61393e81856142fb565b935061394e818560208601614485565b80840191505092915050565b60006139676034836142ea565b9150613972826146bb565b604082019050919050565b600061398a6048836142ea565b91506139958261470a565b606082019050919050565b60006139ad6020836142ea565b91506139b88261477f565b602082019050919050565b60006139d06028836142ea565b91506139db826147a8565b604082019050919050565b60006139f36026836142ea565b91506139fe826147f7565b604082019050919050565b6000613a16602b836142ea565b9150613a2182614846565b604082019050919050565b6000613a396025836142ea565b9150613a4482614895565b604082019050919050565b6000613a5c6029836142ea565b9150613a67826148e4565b604082019050919050565b6000613a7f6025836142ea565b9150613a8a82614933565b604082019050919050565b6000613aa26032836142ea565b9150613aad82614982565b604082019050919050565b6000613ac5602a836142ea565b9150613ad0826149d1565b604082019050919050565b6000613ae86028836142ea565b9150613af382614a20565b604082019050919050565b6000613b0b6024836142ea565b9150613b1682614a6f565b604082019050919050565b6000613b2e6020836142ea565b9150613b3982614abe565b602082019050919050565b6000613b516017836142fb565b9150613b5c82614ae7565b601782019050919050565b6000613b746029836142ea565b9150613b7f82614b10565b604082019050919050565b6000613b976029836142ea565b9150613ba282614b5f565b604082019050919050565b6000613bba6028836142ea565b9150613bc582614bae565b604082019050919050565b6000613bdd6021836142ea565b9150613be882614bfd565b604082019050919050565b6000613c006011836142fb565b9150613c0b82614c4c565b601182019050919050565b6000613c23602f836142ea565b9150613c2e82614c75565b604082019050919050565b6000613c46601c836142ea565b9150613c5182614cc4565b602082019050919050565b613c658161443e565b82525050565b613c748161446c565b82525050565b613c838161446c565b82525050565b6000613c9482613b44565b9150613ca08285613929565b9150613cab82613bf3565b9150613cb78284613929565b91508190509392505050565b6000602082019050613cd8600083018461382c565b92915050565b600060a082019050613cf3600083018861382c565b613d00602083018761382c565b8181036040830152613d12818661383b565b90508181036060830152613d26818561383b565b90508181036080830152613d3a81846138b7565b90509695505050505050565b600060a082019050613d5b600083018861382c565b613d68602083018761382c565b613d756040830186613c7a565b613d826060830185613c7a565b8181036080830152613d9481846138b7565b90509695505050505050565b6000604082019050613db5600083018561382c565b613dc26020830184613c7a565b9392505050565b6000608082019050613dde600083018761382c565b613deb6020830186613c7a565b613df86040830185613c7a565b8181036060830152613e0a81846138b7565b905095945050505050565b60006020820190508181036000830152613e2f818461383b565b905092915050565b60006040820190508181036000830152613e51818561383b565b90508181036020830152613e65818461383b565b90509392505050565b6000602082019050613e836000830184613899565b92915050565b6000602082019050613e9e60008301846138a8565b92915050565b60006020820190508181036000830152613ebe81846138f0565b905092915050565b60006020820190508181036000830152613edf8161395a565b9050919050565b60006020820190508181036000830152613eff8161397d565b9050919050565b60006020820190508181036000830152613f1f816139a0565b9050919050565b60006020820190508181036000830152613f3f816139c3565b9050919050565b60006020820190508181036000830152613f5f816139e6565b9050919050565b60006020820190508181036000830152613f7f81613a09565b9050919050565b60006020820190508181036000830152613f9f81613a2c565b9050919050565b60006020820190508181036000830152613fbf81613a4f565b9050919050565b60006020820190508181036000830152613fdf81613a72565b9050919050565b60006020820190508181036000830152613fff81613a95565b9050919050565b6000602082019050818103600083015261401f81613ab8565b9050919050565b6000602082019050818103600083015261403f81613adb565b9050919050565b6000602082019050818103600083015261405f81613afe565b9050919050565b6000602082019050818103600083015261407f81613b21565b9050919050565b6000602082019050818103600083015261409f81613b67565b9050919050565b600060208201905081810360008301526140bf81613b8a565b9050919050565b600060208201905081810360008301526140df81613bad565b9050919050565b600060208201905081810360008301526140ff81613bd0565b9050919050565b6000602082019050818103600083015261411f81613c16565b9050919050565b6000602082019050818103600083015261413f81613c39565b9050919050565b600060208201905061415b6000830184613c5c565b92915050565b60006020820190506141766000830184613c7a565b92915050565b60006040820190506141916000830185613c7a565b61419e6020830184613c7a565b9392505050565b60006060820190506141ba6000830186613c7a565b6141c76020830185613c7a565b6141d46040830184613c7a565b949350505050565b60006141e66141f7565b90506141f28282614514565b919050565b6000604051905090565b600067ffffffffffffffff82111561421c5761421b61464c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142485761424761464c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142745761427361464c565b5b61427d8261469d565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006143118261446c565b915061431c8361446c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614351576143506145bf565b5b828201905092915050565b60006143678261446c565b91506143728361446c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143ab576143aa6145bf565b5b828202905092915050565b60006143c18261446c565b91506143cc8361446c565b9250828210156143df576143de6145bf565b5b828203905092915050565b60006143f58261444c565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156144a3578082015181840152602081019050614488565b838111156144b2576000848401525b50505050565b60006144c38261446c565b915060008214156144d7576144d66145bf565b5b600182039050919050565b600060028204905060018216806144fa57607f821691505b6020821081141561450e5761450d61461d565b5b50919050565b61451d8261469d565b810181811067ffffffffffffffff8211171561453c5761453b61464c565b5b80604052505050565b60006145508261446c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614583576145826145bf565b5b600182019050919050565b60006145998261446c565b91506145a48361446c565b9250826145b4576145b36145ee565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d111561469a5760046000803e6146976000516146ae565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4c6567656e6461727920726172697479206c6576656c206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f20746865206d61782072617260208201527f69747920726f6c6c000000000000000000000000000000000000000000000000604082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d6f6e206d757374206265206c6573732072617265207468616e20756e60008201527f636f6d6d6f6e0000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45706963206d757374206265206c6573732072617265207468616e206c65676560008201527f6e64617279000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b7f556e636f6d6d6f6e206d757374206265206c6573732072617265207468616e2060008201527f7261726500000000000000000000000000000000000000000000000000000000602082015250565b7f52617265206d757374206265206c6573732072617265207468616e2065706963600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b7f2063616e206f6e6c7920636c61696d206f6e6365207065722064617900000000600082015250565b600060443d1015614cfd57614d80565b614d056141f7565b60043d036004823e80513d602482011167ffffffffffffffff82111715614d2d575050614d80565b808201805167ffffffffffffffff811115614d4b5750505050614d80565b80602083010160043d038501811115614d68575050505050614d80565b614d7782602001850186614514565b82955050505050505b90565b614d8c816143ea565b8114614d9757600080fd5b50565b614da3816143fc565b8114614dae57600080fd5b50565b614dba81614408565b8114614dc557600080fd5b50565b614dd181614412565b8114614ddc57600080fd5b50565b614de88161443e565b8114614df357600080fd5b50565b614dff8161446c565b8114614e0a57600080fd5b5056fea264697066735822122059f024ba0fe7ba71f3722629b6ef5eea585dd1658c388803f4ec81861b24dd0464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c80635d5d588c116100f9578063a22cb46511610097578063d547741f11610071578063d547741f1461052c578063db43235b14610548578063e985e9c514610566578063f242432a14610596576101c3565b8063a22cb465146104c2578063bd85b039146104de578063d44c46701461050e576101c3565b806375b238fc116100d357806375b238fc1461043857806391d14854146104565780639beccd5f14610486578063a217fddf146104a4576101c3565b80635d5d588c146103e05780636a6b6ed8146103fc578063710d2b151461041a576101c3565b80632bc43fd91161016657806336568abe1161014057806336568abe1461034857806340a32dc5146103645780634e1273f4146103805780634f558e79146103b0576101c3565b80632bc43fd9146102f45780632eb2c2d6146103105780632f2ff15d1461032c576101c3565b806309c3bf72116101a257806309c3bf72146102585780630e89341c1461027657806313ca9157146102a6578063248a9ca3146102c4576101c3565b8062fdd58e146101c857806301ffc9a7146101f857806305c1e52a14610228575b600080fd5b6101e260048036038101906101dd91906134e1565b6105b2565b6040516101ef9190614161565b60405180910390f35b610212600480360381019061020d919061363d565b61067b565b60405161021f9190613e6e565b60405180910390f35b610242600480360381019061023d9190613718565b61075d565b60405161024f9190614161565b60405180910390f35b610260610775565b60405161026d9190614146565b60405180910390f35b610290600480360381019061028b9190613718565b610789565b60405161029d9190613ea4565b60405180910390f35b6102ae61081d565b6040516102bb9190613cc3565b60405180910390f35b6102de60048036038101906102d991906135d8565b610843565b6040516102eb9190613e89565b60405180910390f35b61030e6004803603810190610309919061351d565b610863565b005b61032a60048036038101906103259190613357565b610f4a565b005b61034660048036038101906103419190613601565b610feb565b005b610362600480360381019061035d9190613601565b61100c565b005b61037e6004803603810190610379919061368f565b61108f565b005b61039a6004803603810190610395919061356c565b6112e3565b6040516103a79190613e15565b60405180910390f35b6103ca60048036038101906103c59190613718565b611494565b6040516103d79190613e6e565b60405180910390f35b6103fa60048036038101906103f591906137a8565b6114a8565b005b61040461150d565b6040516104119190614146565b60405180910390f35b610422611521565b60405161042f9190614146565b60405180910390f35b610440611535565b60405161044d9190613e89565b60405180910390f35b610470600480360381019061046b9190613601565b611559565b60405161047d9190613e6e565b60405180910390f35b61048e6115c4565b60405161049b9190614146565b60405180910390f35b6104ac6115d8565b6040516104b99190613e89565b60405180910390f35b6104dc60048036038101906104d791906134a5565b6115df565b005b6104f860048036038101906104f39190613718565b6115f5565b6040516105059190614161565b60405180910390f35b610516611612565b6040516105239190614146565b60405180910390f35b61054660048036038101906105419190613601565b611626565b005b610550611647565b60405161055d9190614146565b60405180910390f35b610580600480360381019061057b919061331b565b61165b565b60405161058d9190613e6e565b60405180910390f35b6105b060048036038101906105ab9190613416565b6116ef565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a90613f66565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061074657507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610756575061075582611790565b5b9050919050565b60056020528060005260406000206000915090505481565b6007601c9054906101000a900461ffff1681565b606060028054610798906144e2565b80601f01602080910402602001604051908101604052809291908181526020018280546107c4906144e2565b80156108115780601f106107e657610100808354040283529160200191610811565b820191906000526020600020905b8154815290600101906020018083116107f457829003601f168201915b50505050509050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060046000838152602001908152602001600020600101549050919050565b62015180600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108b19190614306565b42116108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e990614126565b60405180910390fd5b60006108fd8361180a565b905060006007601c9054906101000a900461ffff1661ffff1682610921919061458e565b9050600060606000806001811115610962577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050600760149054906101000a900461ffff1661ffff168410156109c157600060048111156109ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250610b17565b600760169054906101000a900461ffff1661ffff16841015610a1e5760016004811115610a17577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250610b16565b600760189054906101000a900461ffff1661ffff16841015610a7b5760026004811115610a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250610b15565b6007601a9054906101000a900461ffff1661ffff16841015610ad85760036004811115610ad1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9250610b14565b600480811115610b11577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b92505b5b5b5b600480811115610b50577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b831415610b7857610b738860018060405180602001604052806000815250611841565b610ea7565b60006001811115610bb2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610bbb8861180a565b610bc5919061458e565b905060008060006008600085815260200190815260200160002060008781526020019081526020016000208054610bfb906144e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c27906144e2565b8015610c745780601f10610c4957610100808354040283529160200191610c74565b820191906000526020600020905b815481529060010190602001808311610c5757829003601f168201915b5050505050806020019051810190610c8c9190613741565b925092509250600060018484610ca291906143b6565b610cac9190614306565b610cb58c61180a565b610cbf919061458e565b84610cca9190614306565b9050600180811115610d05577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b851415610dc8576000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634eb902998e846040518363ffffffff1660e01b8152600401610d6e929190613da0565b600060405180830381600087803b158015610d8857600080fd5b505af1158015610d9c573d6000803e3d6000fd5b5050505081604051602001610db19190614161565b604051602081830303815290604052965050610ea2565b60008251610dd58d61180a565b610ddf919061458e565b9050610e3c8d848381518110610e1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518460405180602001604052806000815250611841565b828181518110610e75577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182604051602001610e8f92919061417c565b6040516020818303038152906040529650505b505050505b7f0abddb16689c98df752491657c9e586eff3198ece0269bcb57d4f690528e71a488828585604051610edc9493929190613dc9565b60405180910390a142600560008881526020019081526020016000208190555042600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050505050565b610f526119f2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610f985750610f9785610f926119f2565b61165b565b5b610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce90613fe6565b60405180910390fd5b610fe485858585856119fa565b5050505050565b610ff482610843565b610ffd81611d68565b6110078383611d7c565b505050565b6110146119f2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890614106565b60405180910390fd5b61108b8282611e5d565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756110b981611d68565b8561ffff168761ffff1610611103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fa90613f46565b60405180910390fd5b8461ffff168661ffff161061114d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114490614046565b60405180910390fd5b8361ffff168561ffff1610611197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118e90614066565b60405180910390fd5b8261ffff168461ffff16106111e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d890613f86565b60405180910390fd5b8161ffff168361ffff16111561122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390613ee6565b60405180910390fd5b86600760146101000a81548161ffff021916908361ffff16021790555085600760166101000a81548161ffff021916908361ffff16021790555084600760186101000a81548161ffff021916908361ffff160217905550836007601a6101000a81548161ffff021916908361ffff160217905550826007601c6101000a81548161ffff021916908361ffff160217905550816007601e6101000a81548161ffff021916908361ffff16021790555050505050505050565b60608151835114611329576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611320906140a6565b60405180910390fd5b6000835167ffffffffffffffff81111561136c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561139a5781602001602082028036833780820191505090505b50905060005b8451811015611489576114338582815181106113e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110611426577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516105b2565b82828151811061146c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508061148290614545565b90506113a0565b508091505092915050565b6000806114a0836115f5565b119050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756114d281611d68565b82826008600088815260200190815260200160002060008781526020019081526020016000209190611505929190612f5c565b505050505050565b600760189054906101000a900461ffff1681565b600760169054906101000a900461ffff1681565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6007601a9054906101000a900461ffff1681565b6000801b81565b6115f16115ea6119f2565b8383611f3f565b5050565b600060036000838152602001908152602001600020549050919050565b6007601e9054906101000a900461ffff1681565b61162f82610843565b61163881611d68565b6116428383611e5d565b505050565b600760149054906101000a900461ffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6116f76119f2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061173d575061173c856117376119f2565b61165b565b5b61177c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177390613fa6565b60405180910390fd5b61178985858585856120ac565b5050505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611803575061180282612348565b5b9050919050565b6000424483604051602001611821939291906141a5565b6040516020818303038152906040528051906020012060001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a8906140e6565b60405180910390fd5b60006118bb6119f2565b905060006118c88561242a565b905060006118d58561242a565b90506118e6836000898585896124f0565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119459190614306565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516119c392919061417c565b60405180910390a46119da8360008985858961275a565b6119e983600089898989612762565b50505050505050565b600033905090565b8151835114611a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a35906140c6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa590613fc6565b60405180910390fd5b6000611ab86119f2565b9050611ac88187878787876124f0565b60005b8451811015611cc5576000858281518110611b0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110611b54577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bec90614006565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611caa9190614306565b9250508190555050505080611cbe90614545565b9050611acb565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d3c929190613e37565b60405180910390a4611d5281878787878761275a565b611d60818787878787612949565b505050505050565b611d7981611d746119f2565b612b30565b50565b611d868282611559565b611e595760016004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611dfe6119f2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611e678282611559565b15611f3b5760006004600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611ee06119f2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa590614086565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161209f9190613e6e565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561211c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211390613fc6565b60405180910390fd5b60006121266119f2565b905060006121338561242a565b905060006121408561242a565b90506121508389898585896124f0565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156121e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121de90614006565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461229c9190614306565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161231992919061417c565b60405180910390a461232f848a8a86868a61275a565b61233d848a8a8a8a8a612762565b505050505050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061241357507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612423575061242282612bcd565b5b9050919050565b60606000600167ffffffffffffffff81111561246f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561249d5781602001602082028036833780820191505090505b50905082816000815181106124db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b6124fe868686868686612c37565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156125fc5760005b83518110156125fa57828181518110612578577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600360008684815181106125bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546125e29190614306565b92505081905550806125f390614545565b9050612536565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156127525760005b8351811015612750576000848281518110612678577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008483815181106126bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006003600084815260200190815260200160002054905081811015612722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271990614026565b60405180910390fd5b81810360036000858152602001908152602001600020819055505050508061274990614545565b9050612634565b505b505050505050565b505050505050565b6127818473ffffffffffffffffffffffffffffffffffffffff16612c3f565b15612941578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016127c7959493929190613d46565b602060405180830381600087803b1580156127e157600080fd5b505af192505050801561281257506040513d601f19601f8201168201806040525081019061280f9190613666565b60015b6128b85761281e61467b565b806308c379a0141561287b5750612833614ced565b8061283e575061287d565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128729190613ea4565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128af90613ec6565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461293f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293690613f26565b60405180910390fd5b505b505050505050565b6129688473ffffffffffffffffffffffffffffffffffffffff16612c3f565b15612b28578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016129ae959493929190613cde565b602060405180830381600087803b1580156129c857600080fd5b505af19250505080156129f957506040513d601f19601f820116820180604052508101906129f69190613666565b60015b612a9f57612a0561467b565b806308c379a01415612a625750612a1a614ced565b80612a255750612a64565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a599190613ea4565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9690613ec6565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1d90613f26565b60405180910390fd5b505b505050505050565b612b3a8282611559565b612bc957612b5f8173ffffffffffffffffffffffffffffffffffffffff166014612c62565b612b6d8360001c6020612c62565b604051602001612b7e929190613c89565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc09190613ea4565b60405180910390fd5b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006002836002612c75919061435c565b612c7f9190614306565b67ffffffffffffffff811115612cbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612cf05781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612d4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612dd8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612e18919061435c565b612e229190614306565b90505b6001811115612f0e577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612e8a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612ec7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612f07906144b8565b9050612e25565b5060008414612f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4990613f06565b60405180910390fd5b8091505092915050565b828054612f68906144e2565b90600052602060002090601f016020900481019282612f8a5760008555612fd1565b82601f10612fa357803560ff1916838001178555612fd1565b82800160010185558215612fd1579182015b82811115612fd0578235825591602001919060010190612fb5565b5b509050612fde9190612fe2565b5090565b5b80821115612ffb576000816000905550600101612fe3565b5090565b600061301261300d84614201565b6141dc565b9050808382526020820190508285602086028201111561303157600080fd5b60005b8581101561306157816130478882613181565b845260208401935060208301925050600181019050613034565b5050509392505050565b600061307e6130798461422d565b6141dc565b9050808382526020820190508285602086028201111561309d57600080fd5b60005b858110156130cd57816130b388826132f1565b8452602084019350602083019250506001810190506130a0565b5050509392505050565b60006130ea6130e58461422d565b6141dc565b9050808382526020820190508285602086028201111561310957600080fd5b60005b85811015613139578161311f8882613306565b84526020840193506020830192505060018101905061310c565b5050509392505050565b600061315661315184614259565b6141dc565b90508281526020810184848401111561316e57600080fd5b613179848285614476565b509392505050565b60008135905061319081614d83565b92915050565b600082601f8301126131a757600080fd5b81356131b7848260208601612fff565b91505092915050565b600082601f8301126131d157600080fd5b81356131e184826020860161306b565b91505092915050565b600082601f8301126131fb57600080fd5b815161320b8482602086016130d7565b91505092915050565b60008135905061322381614d9a565b92915050565b60008135905061323881614db1565b92915050565b60008135905061324d81614dc8565b92915050565b60008151905061326281614dc8565b92915050565b60008083601f84011261327a57600080fd5b8235905067ffffffffffffffff81111561329357600080fd5b6020830191508360018202830111156132ab57600080fd5b9250929050565b600082601f8301126132c357600080fd5b81356132d3848260208601613143565b91505092915050565b6000813590506132eb81614ddf565b92915050565b60008135905061330081614df6565b92915050565b60008151905061331581614df6565b92915050565b6000806040838503121561332e57600080fd5b600061333c85828601613181565b925050602061334d85828601613181565b9150509250929050565b600080600080600060a0868803121561336f57600080fd5b600061337d88828901613181565b955050602061338e88828901613181565b945050604086013567ffffffffffffffff8111156133ab57600080fd5b6133b7888289016131c0565b935050606086013567ffffffffffffffff8111156133d457600080fd5b6133e0888289016131c0565b925050608086013567ffffffffffffffff8111156133fd57600080fd5b613409888289016132b2565b9150509295509295909350565b600080600080600060a0868803121561342e57600080fd5b600061343c88828901613181565b955050602061344d88828901613181565b945050604061345e888289016132f1565b935050606061346f888289016132f1565b925050608086013567ffffffffffffffff81111561348c57600080fd5b613498888289016132b2565b9150509295509295909350565b600080604083850312156134b857600080fd5b60006134c685828601613181565b92505060206134d785828601613214565b9150509250929050565b600080604083850312156134f457600080fd5b600061350285828601613181565b9250506020613513858286016132f1565b9150509250929050565b60008060006060848603121561353257600080fd5b600061354086828701613181565b9350506020613551868287016132f1565b9250506040613562868287016132f1565b9150509250925092565b6000806040838503121561357f57600080fd5b600083013567ffffffffffffffff81111561359957600080fd5b6135a585828601613196565b925050602083013567ffffffffffffffff8111156135c257600080fd5b6135ce858286016131c0565b9150509250929050565b6000602082840312156135ea57600080fd5b60006135f884828501613229565b91505092915050565b6000806040838503121561361457600080fd5b600061362285828601613229565b925050602061363385828601613181565b9150509250929050565b60006020828403121561364f57600080fd5b600061365d8482850161323e565b91505092915050565b60006020828403121561367857600080fd5b600061368684828501613253565b91505092915050565b60008060008060008060c087890312156136a857600080fd5b60006136b689828a016132dc565b96505060206136c789828a016132dc565b95505060406136d889828a016132dc565b94505060606136e989828a016132dc565b93505060806136fa89828a016132dc565b92505060a061370b89828a016132dc565b9150509295509295509295565b60006020828403121561372a57600080fd5b6000613738848285016132f1565b91505092915050565b60008060006060848603121561375657600080fd5b600061376486828701613306565b935050602061377586828701613306565b925050604084015167ffffffffffffffff81111561379257600080fd5b61379e868287016131ea565b9150509250925092565b600080600080606085870312156137be57600080fd5b60006137cc878288016132f1565b94505060206137dd878288016132f1565b935050604085013567ffffffffffffffff8111156137fa57600080fd5b61380687828801613268565b925092505092959194509250565b60006138208383613c6b565b60208301905092915050565b613835816143ea565b82525050565b60006138468261429a565b61385081856142c8565b935061385b8361428a565b8060005b8381101561388c5781516138738882613814565b975061387e836142bb565b92505060018101905061385f565b5085935050505092915050565b6138a2816143fc565b82525050565b6138b181614408565b82525050565b60006138c2826142a5565b6138cc81856142d9565b93506138dc818560208601614485565b6138e58161469d565b840191505092915050565b60006138fb826142b0565b61390581856142ea565b9350613915818560208601614485565b61391e8161469d565b840191505092915050565b6000613934826142b0565b61393e81856142fb565b935061394e818560208601614485565b80840191505092915050565b60006139676034836142ea565b9150613972826146bb565b604082019050919050565b600061398a6048836142ea565b91506139958261470a565b606082019050919050565b60006139ad6020836142ea565b91506139b88261477f565b602082019050919050565b60006139d06028836142ea565b91506139db826147a8565b604082019050919050565b60006139f36026836142ea565b91506139fe826147f7565b604082019050919050565b6000613a16602b836142ea565b9150613a2182614846565b604082019050919050565b6000613a396025836142ea565b9150613a4482614895565b604082019050919050565b6000613a5c6029836142ea565b9150613a67826148e4565b604082019050919050565b6000613a7f6025836142ea565b9150613a8a82614933565b604082019050919050565b6000613aa26032836142ea565b9150613aad82614982565b604082019050919050565b6000613ac5602a836142ea565b9150613ad0826149d1565b604082019050919050565b6000613ae86028836142ea565b9150613af382614a20565b604082019050919050565b6000613b0b6024836142ea565b9150613b1682614a6f565b604082019050919050565b6000613b2e6020836142ea565b9150613b3982614abe565b602082019050919050565b6000613b516017836142fb565b9150613b5c82614ae7565b601782019050919050565b6000613b746029836142ea565b9150613b7f82614b10565b604082019050919050565b6000613b976029836142ea565b9150613ba282614b5f565b604082019050919050565b6000613bba6028836142ea565b9150613bc582614bae565b604082019050919050565b6000613bdd6021836142ea565b9150613be882614bfd565b604082019050919050565b6000613c006011836142fb565b9150613c0b82614c4c565b601182019050919050565b6000613c23602f836142ea565b9150613c2e82614c75565b604082019050919050565b6000613c46601c836142ea565b9150613c5182614cc4565b602082019050919050565b613c658161443e565b82525050565b613c748161446c565b82525050565b613c838161446c565b82525050565b6000613c9482613b44565b9150613ca08285613929565b9150613cab82613bf3565b9150613cb78284613929565b91508190509392505050565b6000602082019050613cd8600083018461382c565b92915050565b600060a082019050613cf3600083018861382c565b613d00602083018761382c565b8181036040830152613d12818661383b565b90508181036060830152613d26818561383b565b90508181036080830152613d3a81846138b7565b90509695505050505050565b600060a082019050613d5b600083018861382c565b613d68602083018761382c565b613d756040830186613c7a565b613d826060830185613c7a565b8181036080830152613d9481846138b7565b90509695505050505050565b6000604082019050613db5600083018561382c565b613dc26020830184613c7a565b9392505050565b6000608082019050613dde600083018761382c565b613deb6020830186613c7a565b613df86040830185613c7a565b8181036060830152613e0a81846138b7565b905095945050505050565b60006020820190508181036000830152613e2f818461383b565b905092915050565b60006040820190508181036000830152613e51818561383b565b90508181036020830152613e65818461383b565b90509392505050565b6000602082019050613e836000830184613899565b92915050565b6000602082019050613e9e60008301846138a8565b92915050565b60006020820190508181036000830152613ebe81846138f0565b905092915050565b60006020820190508181036000830152613edf8161395a565b9050919050565b60006020820190508181036000830152613eff8161397d565b9050919050565b60006020820190508181036000830152613f1f816139a0565b9050919050565b60006020820190508181036000830152613f3f816139c3565b9050919050565b60006020820190508181036000830152613f5f816139e6565b9050919050565b60006020820190508181036000830152613f7f81613a09565b9050919050565b60006020820190508181036000830152613f9f81613a2c565b9050919050565b60006020820190508181036000830152613fbf81613a4f565b9050919050565b60006020820190508181036000830152613fdf81613a72565b9050919050565b60006020820190508181036000830152613fff81613a95565b9050919050565b6000602082019050818103600083015261401f81613ab8565b9050919050565b6000602082019050818103600083015261403f81613adb565b9050919050565b6000602082019050818103600083015261405f81613afe565b9050919050565b6000602082019050818103600083015261407f81613b21565b9050919050565b6000602082019050818103600083015261409f81613b67565b9050919050565b600060208201905081810360008301526140bf81613b8a565b9050919050565b600060208201905081810360008301526140df81613bad565b9050919050565b600060208201905081810360008301526140ff81613bd0565b9050919050565b6000602082019050818103600083015261411f81613c16565b9050919050565b6000602082019050818103600083015261413f81613c39565b9050919050565b600060208201905061415b6000830184613c5c565b92915050565b60006020820190506141766000830184613c7a565b92915050565b60006040820190506141916000830185613c7a565b61419e6020830184613c7a565b9392505050565b60006060820190506141ba6000830186613c7a565b6141c76020830185613c7a565b6141d46040830184613c7a565b949350505050565b60006141e66141f7565b90506141f28282614514565b919050565b6000604051905090565b600067ffffffffffffffff82111561421c5761421b61464c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142485761424761464c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142745761427361464c565b5b61427d8261469d565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006143118261446c565b915061431c8361446c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614351576143506145bf565b5b828201905092915050565b60006143678261446c565b91506143728361446c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143ab576143aa6145bf565b5b828202905092915050565b60006143c18261446c565b91506143cc8361446c565b9250828210156143df576143de6145bf565b5b828203905092915050565b60006143f58261444c565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156144a3578082015181840152602081019050614488565b838111156144b2576000848401525b50505050565b60006144c38261446c565b915060008214156144d7576144d66145bf565b5b600182039050919050565b600060028204905060018216806144fa57607f821691505b6020821081141561450e5761450d61461d565b5b50919050565b61451d8261469d565b810181811067ffffffffffffffff8211171561453c5761453b61464c565b5b80604052505050565b60006145508261446c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614583576145826145bf565b5b600182019050919050565b60006145998261446c565b91506145a48361446c565b9250826145b4576145b36145ee565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d111561469a5760046000803e6146976000516146ae565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4c6567656e6461727920726172697479206c6576656c206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f20746865206d61782072617260208201527f69747920726f6c6c000000000000000000000000000000000000000000000000604082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d6f6e206d757374206265206c6573732072617265207468616e20756e60008201527f636f6d6d6f6e0000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45706963206d757374206265206c6573732072617265207468616e206c65676560008201527f6e64617279000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b7f556e636f6d6d6f6e206d757374206265206c6573732072617265207468616e2060008201527f7261726500000000000000000000000000000000000000000000000000000000602082015250565b7f52617265206d757374206265206c6573732072617265207468616e2065706963600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b7f2063616e206f6e6c7920636c61696d206f6e6365207065722064617900000000600082015250565b600060443d1015614cfd57614d80565b614d056141f7565b60043d036004823e80513d602482011167ffffffffffffffff82111715614d2d575050614d80565b808201805167ffffffffffffffff811115614d4b5750505050614d80565b80602083010160043d038501811115614d68575050505050614d80565b614d7782602001850186614514565b82955050505050505b90565b614d8c816143ea565b8114614d9757600080fd5b50565b614da3816143fc565b8114614dae57600080fd5b50565b614dba81614408565b8114614dc557600080fd5b50565b614dd181614412565b8114614ddc57600080fd5b50565b614de88161443e565b8114614df357600080fd5b50565b614dff8161446c565b8114614e0a57600080fd5b5056fea264697066735822122059f024ba0fe7ba71f3722629b6ef5eea585dd1658c388803f4ec81861b24dd0464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)": {
        "params": {
          "common": "- rarity level of common quests",
          "epic": "- rarity level of epic quests",
          "legendary": "- rarity level of legendary quests",
          "maxRoll": "- max rarity level",
          "rare": "- rarity level of rare quests",
          "uncommon": "- rarity level of uncommon quests"
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "_commonRoll": {
        "details": "Rarity rolls"
      },
      "_lastClaimed": {
        "details": "Track last time an address claim"
      },
      "_lastUpdate": {
        "details": "Track last time a claim was made for a specific pet"
      },
      "_rewardMapping": {
        "details": "rewardType => (rewardRarity => data)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRarityRolls(uint16,uint16,uint16,uint16,uint16,uint16)": {
        "notice": "returns the rarity level set for each rarity, and the maximum roll"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 418,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 424,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 426,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3230,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3396,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_lastUpdate",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3401,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_lastClaimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3403,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_milkContractAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3417,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_commonRoll",
        "offset": 20,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 3420,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_uncommonRoll",
        "offset": 22,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 3423,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_rareRoll",
        "offset": 24,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 3426,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_epicRoll",
        "offset": 26,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 3429,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_legendaryRoll",
        "offset": 28,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 3431,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_maxRarityRoll",
        "offset": 30,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 3447,
        "contract": "contracts/itemFactory.sol:ItemFactory",
        "label": "_rewardMapping",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bytes_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/itemFactory.sol:ItemFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/itemFactory.sol:ItemFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}